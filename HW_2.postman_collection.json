{
	"info": {
		"_postman_id": "87e41d11-60ec-40d1-b4ea-e4dbb69dc6e1",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверить, что age в ответе равно age s request\r",
							"var jsonData = pm.response.json();\r",
							"var resp_age = + jsonData.age;\r",
							"\r",
							"var req = request.data;\r",
							"var req_age = +req.age\r",
							"\r",
							"console.log(\"resp_age = \", resp_age)\r",
							"console.log(\"req_age = \", req_age)\r",
							"\r",
							" pm.test(\"request_age_check\", function () {\r",
							"    pm.expect(req_age).to.eql(resp_age);\r",
							" });\r",
							"///Проверить, что name в ответе равно name s request\r",
							"var jsonData = pm.response.json();\r",
							"var resp_name = jsonData.name;\r",
							"\r",
							"var req = request.data;\r",
							"var req_name = req.name\r",
							"\r",
							"console.log(\"resp_name = \", resp_name)\r",
							"console.log(\"req_name = \", req_name)\r",
							"\r",
							" pm.test(\"request_name_check\", function () {\r",
							"    pm.expect(req_name).to.eql(resp_name);\r",
							" });\r",
							"//Проверить, что salary в ответе равно salary s request\r",
							"var jsonData = pm.response.json();\r",
							"var resp_salary = +jsonData.salary;\r",
							"\r",
							"var req = request.data;\r",
							"var req_salary = +req.salary\r",
							"\r",
							"console.log(\"resp_salary = \", resp_salary)\r",
							"console.log(\"req_salary = \", req_salary)\r",
							"\r",
							" pm.test(\"request_salary_check\", function () {\r",
							"    pm.expect(req_salary).to.eql(resp_salary);\r",
							" });\r",
							" ///Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family)\r",
							"///Проверить что u_salary_1_5_year в ответе равно salary*4\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"var resp_u_salary_1_5_year = +jsonData.family.u_salary_1_5_year;\r",
							"\r",
							"console.log(\"resp_u_salary_1_5_year = \", resp_u_salary_1_5_year)\r",
							"\r",
							" pm.test(\"request_salary 1_5_year_check\", function () {\r",
							"    pm.expect(resp_u_salary_1_5_year).to.eql(jsonData.salary*4);\r",
							" });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "margo",
							"type": "default"
						},
						{
							"key": "age",
							"value": "37",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверить, что name в ответе равно name s request\r",
							"var jsonData = pm.response.json();\r",
							"var resp_name = jsonData.name\r",
							"\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_url.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request\r",
							"var jsonData = pm.response.json();\r",
							"var resp_age = jsonData.age\r",
							"\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_url.age);\r",
							"});\r",
							"//Проверить, что salary в ответе равно salary s request\r",
							" var jsonData = pm.response.json();\r",
							" var resp_salary = jsonData.salary\r",
							"\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"req_url.salary = Number(req_url.salary)\r",
							"\r",
							"console.log(\"salary = \", resp_salary)\r",
							"console.log(\"req_salary = \", req_url.salary)\r",
							"\r",
							" pm.test(\"salary_check\", function () {\r",
							"     pm.expect(resp_salary).to.eql(req_url.salary);\r",
							" });\r",
							"//Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family);\r",
							"//Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"dog has name\",() => {\r",
							"  pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/object_info_3?name=Margo&age=37&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Margo"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Проверить, что name в ответе равно name s request\r",
							"var jsonData = pm.response.json();\r",
							"var resp_name = jsonData.name\r",
							"\r",
							"var req_url = pm.request.url.query.toObject();\r",
							"\r",
							"pm.test(\"name_check\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_url.name);\r",
							"});\r",
							"//Проверить, что age в ответе равно age s request\r",
							" var jsonData = pm.response.json();\r",
							" var resp_age = +jsonData.age\r",
							"\r",
							" var req_url = pm.request.url.query.toObject();\r",
							"req_url.age = Number(req_url.age)\r",
							"\r",
							"pm.test(\"age_check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_url.age);\r",
							"});\r",
							"//Вывести в консоль параметр salary из response\r",
							"var jsonData = pm.response.json();\r",
							"var resp_salary = jsonData.salary\r",
							"\r",
							"console.log(resp_salary);\r",
							"//Вывести в консоль параметр salary из request\r",
							"var req = pm.request.url.query.toObject();\r",
							"\r",
							"console.log(req.salary);\r",
							"//Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(\"salary[0]\",resp_salary[0]);\r",
							"//Вывести в консоль 1-й элемент параметра salary из response\r",
							"console.log(\"salary[1]\",resp_salary[1]);\r",
							"//Вывести в консоль 1-й элемент параметра salary из response\r",
							"console.log(\"salary[2]\", resp_salary[2]);\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request\r",
							"pm.test(\"salary[0] check\", function () {\r",
							"    pm.expect(resp_salary[0]).to.eql(Number(req_url.salary));\r",
							"});\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request\r",
							"pm.test(\"salary[1] check\", function () {\r",
							"    pm.expect(Number(resp_salary[1])).to.eql(req_url.salary*2);\r",
							"});\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request\r",
							"pm.test(\"salary[2] check\", function () {\r",
							"    pm.expect(Number(resp_salary[2])).to.eql(req_url.salary*3);\r",
							"});\r",
							"//Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Margo\");\r",
							"//Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", \"1000\");\r",
							"//Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", \"37\");\r",
							"\r",
							"//аписать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"\r",
							"for(let i = 0; i < resp_salary.lenght; i++){\r",
							"    console.log(resp_salary[i]);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Margo&age=37&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Margo"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//Спарсить response body в json,Спарсить request\r",
							"var jsonData = pm.response.json();\r",
							"var req = request.data;\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"property start_qa_salary check\", function () {\r",
							"    pm.expect(jsonData).has.haveOwnProperty(\"start_qa_salary\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"property qa_salary_after_6_months check\", function () {\r",
							"    pm.expect(jsonData).has.haveOwnProperty(\"qa_salary_after_6_months\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"property qa_salary_after_12_months check\", function () {\r",
							"    pm.expect(jsonData).has.haveOwnProperty(\"qa_salary_after_12_months\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"property qa_salary_after_1.5_year check\", function () {\r",
							"    pm.expect(jsonData).has.haveOwnProperty(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"property qa_salary_after_3.5_years check\", function () {\r",
							"    pm.expect(jsonData).has.haveOwnProperty(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"property person check\", function () {\r",
							"    pm.expect(jsonData).has.haveOwnProperty(\"person\");\r",
							"});\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request\r",
							"pm.test(\"start_qa_salary=salary request\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(Number(req.salary));\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request\r",
							"pm.test(\"qa_salary_after_6_months = salary*2 request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary*2);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request\r",
							"pm.test(\"qa_salary_after_12_months = salary*2.7 request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary*2.7);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request\r",
							"pm.test(\"qa_salary_after_1.5_year = salary*3.3\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(+req.salary*3.3);\r",
							"});\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request\r",
							"pm.test(\"qa_salary_after_3.5_years = salary*3.8\", function () {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(+req.salary*3.8);\r",
							"});\r",
							"//проверить, что в параметре person, 1-й элемент из u_name равен salary из request\r",
							"pm.test(\"u_name[1]=salary check\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(Number(req.salary));\r",
							"});\r",
							"//Проверить, что что параметр u_age равен age из request\r",
							"pm.test(\"u_age=age check\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(Number(req.age));\r",
							"});\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request\r",
							"pm.test(\"u_salary_5_years=salary*4.2 check\", function () {\r",
							"     pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary*4.2);\r",
							"});\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person\r",
							"for(var key in jsonData.person) {\r",
							"   if(typeof(jsonData.person[key]) == 'object'){\r",
							"       for(let i = 0; i < Object.keys(jsonData.person[key]).length; i++){\r",
							"           console.log(jsonData.person[key][i]);\r",
							"       }\r",
							"   }\r",
							"   else if(typeof(jsonData.person[key]) != 'object') {\r",
							"        console.log(jsonData.person[key]);\r",
							"   }\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}